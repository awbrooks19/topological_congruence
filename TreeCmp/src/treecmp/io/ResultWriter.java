/** This file is part of TreeCmp, a tool for comparing phylogenetic trees    using the Matching Split distance and other metrics.    Copyright (C) 2011,  Damian Bogdanowicz    This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see <http://www.gnu.org/licenses/>. */package treecmp.io;import java.io.File;import java.io.FileWriter;import java.io.IOException;public class ResultWriter {    public final static String NEW_LINE = System.getProperty("line.separator");    private String result;    public boolean writeToFile;    private String fileName;    private File file;    private FileWriter filewriter;    /** Creates a new instance of ResultWriter */    public ResultWriter() {    }    public ResultWriter(String txt, boolean writeToFile_, String fileName_) {        this.result = txt;        this.writeToFile = writeToFile_;        this.fileName = fileName_;    }    public ResultWriter(String txt) {        this.result = txt;        this.writeToFile = false;    }    public void init() {        if (this.writeToFile == true) {            this.file = new File(this.fileName);            try {                this.filewriter = new FileWriter(this.file);            } catch (IOException ex) {                System.out.print("Error. There is a problem with an output file: "+this.fileName+"\n");            }        }    }    public void close() {        if (this.filewriter != null) {            try {                this.filewriter.close();            } catch (IOException ex) {                ex.printStackTrace();            }        }    }    public void write() {        if (this.writeToFile == false) {            System.out.println(this.result);        } else {            try {                this.filewriter.write(this.result + NEW_LINE);            } catch (IOException ex) {                ex.printStackTrace();            }        }    }    public void write_pure() {        if (this.writeToFile == false) {            System.out.println(this.result);        } else {            try {                this.filewriter.write(this.result);            } catch (IOException ex) {                ex.printStackTrace();            }        }    }    public void setText(String text) {        this.result = text;    }    public void setFileName(String text) {        this.fileName = text;    }    public void isWriteToFile(boolean is) {        this.writeToFile = is;    }}